import unittest
import pandas as pd

class TestDataProcessing(unittest.TestCase):
    
    def setUp(self):
        # Example DataFrame (replace with your actual DataFrame)
        data = {
            'Overall_status': ['Fail', 'Pass', 'Blocked', 'Pending_Delivery', 'Day2'],
            'TC_STATUS': ['Ready_to_Test', 'Ready_to_Test', 'Blocked', 'Pending_Delivery', 'Day2'],
            'PRODUCT_TYPE': ['nonexotic', 'nonexotic', 'nonexotic', 'nonexotic', 'nonexotic'],
            'EVENT_TYPE': ['newt', 'newt', 'newt', 'other', 'other']
        }
        self.df = pd.DataFrame(data)

        # Initialize counts dictionary
        self.statuses = ['Fail', 'Pass', 'Blocked', 'Pending_Delivery', 'Day2']
        self.event_types = ['newt', 'other']
        self.product_types = ['nonexotic', 'exotic']

        self.counts = {pt: {et: {status: 0 for status in self.statuses} for et in self.event_types} for pt in self.product_types}

        # Define mapping of TC_STATUS to conditions
        self.conditions = {
            'Ready_to_Test': ['Fail', 'Pass'],
            'Blocked': ['Blocked'],
            'Pending_Delivery': ['Pending_Delivery'],
            'Day2': ['Day2']
        }

    def test_counts(self):
        # Filter DataFrame and update counts
        for tc_status, valid_statuses in self.conditions.items():
            valid_statuses = valid_statuses if isinstance(valid_statuses, list) else [valid_statuses]
            for status in valid_statuses:
                mask = (self.df['TC_STATUS'] == tc_status) & (self.df['Overall_status'] == status)
                grouped = self.df[mask].groupby(['PRODUCT_TYPE', 'EVENT_TYPE']).size()
                for (product_type, event_type), count in grouped.items():
                    if product_type in self.counts and event_type in self.counts[product_type]:
                        self.counts[product_type][event_type][status] += count
        
        # Expected result
        expected_counts = {
            'nonexotic': {
                'newt': {'Fail': 1, 'Pass': 1, 'Blocked': 1, 'Pending_Delivery': 0, 'Day2': 0},
                'other': {'Fail': 0, 'Pass': 0, 'Blocked': 0, 'Pending_Delivery': 1, 'Day2': 1}
            },
            'exotic': {
                'newt': {'Fail': 0, 'Pass': 0, 'Blocked': 0, 'Pending_Delivery': 0, 'Day2': 0},
                'other': {'Fail': 0, 'Pass': 0, 'Blocked': 0, 'Pending_Delivery': 0, 'Day2': 0}
            }
        }

        self.assertEqual(self.counts, expected_counts)

if __name__ == '__main__':
    unittest.main()

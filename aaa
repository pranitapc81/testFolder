from google.protobuf.descriptor import FieldDescriptor
from google.protobuf.message import Message
from google.protobuf.json_format import MessageToDict, ParseDict
from typing import Any, List, Dict, Type, Union
import os

class GpbFileUpdater:
    def __init__(self, message_type: Type[Message]):
        """
        Initialize updater with the protobuf message type.
        
        Args:
            message_type: The type of protobuf message (e.g., YourProto_pb2.YourMessage)
        """
        self.message_type = message_type
    
    def read_gpb_file(self, file_path: str) -> Message:
        """
        Read a .gpb file and parse it into a protobuf message.
        
        Args:
            file_path: Path to the .gpb file
            
        Returns:
            Parsed protobuf message
        """
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"GPB file not found: {file_path}")
            
        message = self.message_type()
        with open(file_path, 'rb') as f:
            message.ParseFromString(f.read())
        return message
    
    def write_gpb_file(self, message: Message, file_path: str):
        """
        Write a protobuf message to a .gpb file.
        
        Args:
            message: The protobuf message to write
            file_path: Path where to save the .gpb file
        """
        with open(file_path, 'wb') as f:
            f.write(message.SerializeToString())
    
    def update_value(self, message: Message, path: str, new_value: Any) -> bool:
        """
        Update a single value in the protobuf message.
        
        Args:
            message: The protobuf message to update
            path: Dot-separated path to the field
            new_value: New value to set
            
        Returns:
            bool: True if update was successful
        """
        try:
            path_parts = path.split('.')
            current = message
            
            # Navigate to the final container
            for i, part in enumerate(path_parts[:-1]):
                if '[' in part and ']' in part:
                    field_name, index_str = part.split('[')
                    index = int(index_str.rstrip(']'))
                    current = getattr(current, field_name)[index]
                else:
                    current = getattr(current, part)
            
            # Handle the final field
            last_part = path_parts[-1]
            if '[' in last_part and ']' in last_part:
                field_name, index_str = last_part.split('[')
                index = int(index_str.rstrip(']'))
                repeated_field = getattr(current, field_name)
                repeated_field[index] = new_value
            else:
                setattr(current, last_part, new_value)
            
            return True
        except Exception as e:
            print(f"Failed to update path {path}: {str(e)}")
            return False
    
    def update_gpb_file(self, input_file: str, updates: List[Dict[str, Any]], output_file: str = None) -> bool:
        """
        Read a .gpb file, apply updates, and save the result.
        
        Args:
            input_file: Path to input .gpb file
            updates: List of dictionaries with 'path' and 'value' keys
            output_file: Path to save updated .gpb file (defaults to input_file)
            
        Returns:
            bool: True if all updates were successful
        """
        try:
            # Read the message
            message = self.read_gpb_file(input_file)
            
            # Apply all updates
            success = True
            for update in updates:
                if not self.update_value(message, update['path'], update['value']):
                    success = False
            
            # Write the updated message
            output_path = output_file or input_file
            self.write_gpb_file(message, output_path)
            
            return success
        except Exception as e:
            print(f"Failed to process GPB file: {str(e)}")
            return False
    
    def print_message_structure(self, message: Message, indent: int = 0):
        """
        Print the structure of a protobuf message (helpful for debugging).
        
        Args:
            message: The protobuf message to inspect
            indent: Current indentation level
        """
        for field in message.DESCRIPTOR.fields:
            prefix = '  ' * indent
            if field.type == FieldDescriptor.TYPE_MESSAGE:
                print(f"{prefix}{field.name}: {{")
                if field.label == FieldDescriptor.LABEL_REPEATED:
                    if len(getattr(message, field.name)) > 0:
                        self.print_message_structure(getattr(message, field.name)[0], indent + 1)
                else:
                    self.print_message_structure(getattr(message, field.name), indent + 1)
                print(f"{prefix}}}")
            else:
                value = getattr(message, field.name)
                if field.label == FieldDescriptor.LABEL_REPEATED:
                    print(f"{prefix}{field.name}: [...]")
                else:
                    print(f"{prefix}{field.name}: {value}")

def example_usage():
    """
    Example of how to use the GpbFileUpdater.
    """
    # Import your generated protobuf module
    # import your_proto_pb2
    
    # Initialize the updater with your message type
    # updater = GpbFileUpdater(your_proto_pb2.YourMessage)
    
    # Example updates
    updates = [
        {"path": "field1", "value": "new_value"},
        {"path": "nested.field", "value": 42},
        {"path": "repeated_field[0].name", "value": "updated_name"}
    ]
    
    # Update the .gpb file
    # success = updater.update_gpb_file('input.gpb', updates, 'output.gpb')
    
    # Print result
    # if success:
    #     print("GPB file updated successfully")
    # else:
    #     print("Some updates failed")
    pass

# Actual usage example (uncomment and modify with your actual proto):
"""
# Assuming you have generated proto file and message type
import my_proto_pb2

# Initialize updater
updater = GpbFileUpdater(my_proto_pb2.MyMessage)

# Read and print current structure
message = updater.read_gpb_file('input.gpb')
print("Current message structure:")
updater.print_message_structure(message)

# Define updates
updates = [
    {"path": "some_field", "value": "new_value"},
    {"path": "nested.field", "value": 42},
    {"path": "repeated_field[0].name", "value": "updated"}
]

# Apply updates
success = updater.update_gpb_file('input.gpb', updates, 'output.gpb')
"""


import your_proto_pb2  # Your generated protobuf module

# Initialize updater with your message type
updater = GpbFileUpdater(your_proto_pb2.YourMessage)

# To see the structure of your current .gpb file:
message = updater.read_gpb_file('your_file.gpb')
updater.print_message_structure(message)

# Define your updates
updates = [
    {"path": "field_name", "value": "new_value"},
    {"path": "nested.field", "value": 42},
    {"path": "repeated_field[0].name", "value": "updated"}
]

# Apply updates
success = updater.update_gpb_file('your_file.gpb', updates, 'updated_file.gpb')

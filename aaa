import unittest
from unittest.mock import MagicMock, call
from execution_dao import ExecutionDAO, Execution
from execution_service import ExecutionService

class TestExecutionService(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.mock_execution_dao = MagicMock(spec=ExecutionDAO)
        cls.setup_mock_data()

    @classmethod
    def tearDownClass(cls):
        pass

    @classmethod
    def setup_mock_data(cls):
        cls.mock_executions = [
            Execution(id=1, name="Execution 1", status="completed"),
            Execution(id=2, name="Execution 2", status="pending"),
        ]

    def setUp(self):
        self.service = ExecutionService(self.mock_execution_dao)
        self.mock_execution_dao.reset_mock()

    def tearDown(self):
        pass

    def test_save_execution(self):
        name = "Execution 3"
        status = "running"
        new_execution = Execution(id=None, name=name, status=status)

        self.service.create_execution(name, status)
        
        self.mock_execution_dao.save_execution.assert_called_once()
        saved_execution = self.mock_execution_dao.save_execution.call_args[0][0]
        self.assertEqual(saved_execution.name, name)
        self.assertEqual(saved_execution.status, status)

    def test_get_all_executions(self):
        self.mock_execution_dao.get_executions.return_value = self.mock_executions

        executions = self.service.get_all_executions()
        
        self.mock_execution_dao.get_executions.assert_called_once()
        self.assertEqual(executions, self.mock_executions)

    def test_get_execution_by_id(self):
        execution_id = 1
        self.mock_execution_dao.get_execution_by_id.return_value = self.mock_executions[0]

        execution = self.service.get_execution_by_id(execution_id)
        
        self.mock_execution_dao.get_execution_by_id.assert_called_once_with(execution_id)
        self.assertEqual(execution, self.mock_executions[0])

    def test_get_execution_by_name(self):
        execution_name = "Execution 1"
        self.mock_execution_dao.get_execution_by_name.return_value = self.mock_executions[0]

        execution = self.service.get_execution_by_name(execution_name)
        
        self.mock_execution_dao.get_execution_by_name.assert_called_once_with(execution_name)
        self.assertEqual(execution, self.mock_executions[0])


if __name__ == '__main__':
    unittest.main()

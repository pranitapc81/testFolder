from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

Base = declarative_base()

class TradeStub(Base):
    __tablename__ = 'TRADE_STUB'
    ID = Column(Integer, primary_key=True)
    TRADE_ID = Column(Integer)
    VERSION = Column(Integer)
    MESSAGE = Column(String)
    ORDER = Column(Integer)

class StubbedAttribute(Base):
    __tablename__ = 'STUBBED_ATTRIBUTE'
    ATTRIBUTE_ID = Column(Integer, primary_key=True)
    TRADE_STUB_ID = Column(Integer)
    KEY = Column(String)
    VALUE = Column(String)
    GROUP_ID = Column(Integer)


import pandas as pd
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

class TradeMatcher:
    def __init__(self, df, db_connection_string):
        self.df = df
        self.engine = create_engine(db_connection_string)
        self.Session = sessionmaker(bind=self.engine)
        self.trade_stubs = None
        self.stubbed_attributes = None

    def get_unique_trade_ids(self):
        return self.df['TradeID'].unique()

    def query_trade_stubs(self, unique_trade_ids):
        session = self.Session()
        try:
            self.trade_stubs = session.query(TradeStub).filter(TradeStub.TRADE_ID.in_(unique_trade_ids)).all()
        finally:
            session.close()

    def query_stubbed_attributes(self):
        unique_trade_stub_ids = [trade_stub.ID for trade_stub in self.trade_stubs]
        session = self.Session()
        try:
            self.stubbed_attributes = session.query(StubbedAttribute).filter(StubbedAttribute.TRADE_STUB_ID.in_(unique_trade_stub_ids)).all()
        finally:
            session.close()

    def match_attributes(self):
        # Add columns to DataFrame
        self.df['trade_stub_id'] = None
        self.df['match_status'] = 'no match'

        # Identify attribute columns dynamically (excluding 'TradeID' and newly added columns)
        attribute_columns = self.df.columns.difference(['TradeID', 'trade_stub_id', 'match_status'])

        for index, row in self.df.iterrows():
            trade_id = row['TradeID']
            
            # Filter trade_stubs for the current TradeID
            matching_stubs = [stub for stub in self.trade_stubs if stub.TRADE_ID == trade_id]
            
            # Flag to track if a match is found
            match_found = False
            
            for stub in matching_stubs:
                trade_stub_id = stub.ID
                
                # Filter attributes for the current trade_stub_id
                matching_attributes = [attr for attr in self.stubbed_attributes if attr.TRADE_STUB_ID == trade_stub_id]
                
                # Create a dictionary of attributes to match
                row_attributes = row[attribute_columns].to_dict()
                
                # Check if all attributes match within the same GROUP_ID
                group_ids = {attr.GROUP_ID for attr in matching_attributes}
                
                for group_id in group_ids:
                    group_attributes = [attr for attr in matching_attributes if attr.GROUP_ID == group_id]
                    
                    match = all(
                        any(attr.KEY == key and attr.VALUE == value for attr in group_attributes)
                        for key, value in row_attributes.items()
                    )
                    
                    if match:
                        self.df.at[index, 'trade_stub_id'] = trade_stub_id
                        self.df.at[index, 'match_status'] = 'match'
                        match_found = True
                        break
                
                if match_found:
                    break

    def run(self):
        unique_trade_ids = self.get_unique_trade_ids()
        self.query_trade_stubs(unique_trade_ids)
        self.query_stubbed_attributes()
        self.match_attributes()
        return self.df

# Usage
data = {
    'TradeID': [456, 456, 456, 456, 123, 123, 123, 789, 333, 555],
    'Col1': ['a1', 'a1', 'a1', 's1', 'a1', 'a1', 'a1', '', '1', 'ww'],
    'Col2': ['a2', 'a2', 'a2', 's2', 'a2', 'a2', 'a2', '', '', '3e'],
    'Col3': ['a3', 'a4', 'ae', 's3', 'a3', 'a4', 'ae', '', '', '']
}
df = pd.DataFrame(data)
db_connection_string = 'mysql+pymysql://username:password@host/database'

matcher = TradeMatcher(df, db_connection_string)
result_df = matcher.run()

print(result_df)

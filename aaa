import pandas as pd
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

class TradeMatcher:
    def __init__(self, df, db_connection_string):
        self.df = df
        self.engine = create_engine(db_connection_string)
        self.Session = sessionmaker(bind=self.engine)
        self.trade_stubs = None
        self.stubbed_attributes = None

    def get_unique_trade_ids(self):
        return self.df['TradeID'].unique()

    def query_trade_stubs(self, unique_trade_ids):
        session = self.Session()
        try:
            query = text("SELECT * FROM TRADE_STUB WHERE TRADE_ID IN :trade_ids")
            self.trade_stubs = pd.read_sql(query.bindparams(trade_ids=tuple(unique_trade_ids)), session.bind)
        finally:
            session.close()

    def query_stubbed_attributes(self):
        unique_trade_stub_ids = self.trade_stubs['ID'].unique()
        session = self.Session()
        try:
            query = text("SELECT * FROM STUBBED_ATTRIBUTE WHERE TRADE_STUB_ID IN :trade_stub_ids")
            self.stubbed_attributes = pd.read_sql(query.bindparams(trade_stub_ids=tuple(unique_trade_stub_ids)), session.bind)
        finally:
            session.close()

    def match_attributes(self):
        # Add columns to DataFrame
        self.df['trade_stub_id'] = None
        self.df['match_status'] = 'no match'

        # Identify attribute columns dynamically (excluding 'TradeID' and newly added columns)
        attribute_columns = self.df.columns.difference(['TradeID', 'trade_stub_id', 'match_status'])

        for index, row in self.df.iterrows():
            trade_id = row['TradeID']
            
            # Filter trade_stubs for the current TradeID
            matching_stubs = self.trade_stubs[self.trade_stubs['TRADE_ID'] == trade_id]
            
            # Flag to track if a match is found
            match_found = False
            
            for _, stub in matching_stubs.iterrows():
                trade_stub_id = stub['ID']
                
                # Filter attributes for the current trade_stub_id
                matching_attributes = self.stubbed_attributes[self.stubbed_attributes['TRADE_STUB_ID'] == trade_stub_id]
                
                # Create a dictionary of attributes to match
                row_attributes = row[attribute_columns].to_dict()
                
                # Check if all attributes match within the same GROUP_ID
                for group_id in matching_attributes['GROUP_ID'].unique():
                    group_attributes = matching_attributes[matching_attributes['GROUP_ID'] == group_id]
                    
                    match = all(
                        group_attributes[(group_attributes['KEY'] == key) & (group_attributes['VALUE'] == value)].shape[0] > 0
                        for key, value in row_attributes.items()
                        if key in group_attributes['KEY'].values
                    )
                    
                    if match:
                        self.df.at[index, 'trade_stub_id'] = trade_stub_id
                        self.df.at[index, 'match_status'] = 'match'
                        match_found = True
                        break
                
                if match_found:
                    break

    def run(self):
        unique_trade_ids = self.get_unique_trade_ids()
        self.query_trade_stubs(unique_trade_ids)
        self.query_stubbed_attributes()
        self.match_attributes()
        return self.df

# Usage
data = {
    'TradeID': [456, 456, 456, 456, 123, 123, 123, 789, 333, 555],
    'Col1': ['a1', 'a1', 'a1', 's1', 'a1', 'a1', 'a1', '', '1', 'ww'],
    'Col2': ['a2', 'a2', 'a2', 's2', 'a2', 'a2', 'a2', '', '', '3e'],
    'Col3': ['a3', 'a4', 'ae', 's3', 'a3', 'a4', 'ae', '', '', '']
}
df = pd.DataFrame(data)
db_connection_string = 'mysql+pymysql://username:password@host/database'

matcher = TradeMatcher(df, db_connection_string)
result_df = matcher.run()

print(result_df)

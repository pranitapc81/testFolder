# First, create a file named person.proto with this content:
"""
syntax = "proto3";

package example;

message Person {
    string name = 1;
    Address address = 2;
    repeated PhoneNumber phones = 3;
}

message Address {
    string street = 1;
    string city = 2;
    string country = 3;
}

message PhoneNumber {
    string number = 1;
    PhoneType type = 2;
}

enum PhoneType {
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
}
"""

# Save this as main.py:
from google.protobuf.descriptor import FieldDescriptor
from typing import Any, List, Union
import person_pb2  # This will be generated from person.proto

def update_protobuf_value(message: Any, path: Union[str, List[str]], new_value: Any) -> bool:
    """
    Update a value in a protobuf message using a path string or list of path components.
    """
    if isinstance(path, str):
        path_parts = path.split('.')
    else:
        path_parts = path
    
    current = message
    for i, part in enumerate(path_parts):
        array_index = None
        if '[' in part and ']' in part:
            part, index_str = part.split('[')
            array_index = int(index_str.rstrip(']'))
            
        field = current.DESCRIPTOR.fields_by_name.get(part)
        if not field:
            return False
            
        if i == len(path_parts) - 1:
            try:
                if array_index is not None:
                    repeated_field = getattr(current, part)
                    if array_index >= len(repeated_field):
                        return False
                    if field.type == FieldDescriptor.TYPE_MESSAGE:
                        repeated_field[array_index].CopyFrom(new_value)
                    else:
                        repeated_field[array_index] = new_value
                else:
                    if field.type == FieldDescriptor.TYPE_MESSAGE:
                        getattr(current, part).CopyFrom(new_value)
                    else:
                        setattr(current, part, new_value)
                return True
            except (TypeError, ValueError):
                return False
        
        if array_index is not None:
            repeated_field = getattr(current, part)
            if array_index >= len(repeated_field):
                return False
            current = repeated_field[array_index]
        else:
            current = getattr(current, part)
    
    return False

def main():
    # Create a new Person message
    person = person_pb2.Person()
    
    # Set initial values
    person.name = "John Doe"
    person.address.street = "123 Old Street"
    person.address.city = "Old City"
    person.address.country = "Old Country"
    
    # Add two phone numbers
    phone1 = person.phones.add()
    phone1.number = "555-1111"
    phone1.type = person_pb2.PhoneType.MOBILE
    
    phone2 = person.phones.add()
    phone2.number = "555-2222"
    phone2.type = person_pb2.PhoneType.HOME
    
    # Print initial state
    print("Initial state:")
    print(person)
    print("\n" + "="*50 + "\n")
    
    # Demonstrate different types of updates
    updates = [
        ("name", "Jane Smith"),
        ("address.street", "456 New Street"),
        ("address.city", "New City"),
        ("phones[0].number", "555-3333"),
        (["phones", "1", "type"], person_pb2.PhoneType.WORK)
    ]
    
    for path, value in updates:
        success = update_protobuf_value(person, path, value)
        print(f"Update {path} -> {value}: {'Success' if success else 'Failed'}")
        print(person)
        print("\n" + "="*50 + "\n")

if __name__ == "__main__":
    main()

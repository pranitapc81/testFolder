from sqlalchemy import create_engine, Column, String, Boolean
from sqlalchemy.ext.declarative import declarative_base
import uuid

Base = declarative_base()

class Scenario(Base):
    __tablename__ = 'scenarios'

    scenario_id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    name = Column(String)
    type = Column(String)
    active = Column(Boolean)
    scenario_pack_id = Column(String)

    def __repr__(self):
        return (f"Scenario(ID={self.scenario_id}, Name={self.name}, Type={self.type}, "
                f"Active={self.active}, Scenario Pack ID={self.scenario_pack_id})")

    @property
    def scenario_id(self):
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, value):
        self._scenario_id = value

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def type(self):
        return self._type

    @type.setter
    def type(self, value):
        self._type = value

    @property
    def active(self):
        return self._active

    @active.setter
    def active(self, value):
        self._active = value

    @property
    def scenario_pack_id(self):
        return self._scenario_pack_id

    @scenario_pack_id.setter
    def scenario_pack_id(self, value):
        self._scenario_pack_id = value

class ScenarioBuilder:
    def __init__(self):
        self._scenario_id = None
        self._name = None
        self._type = None
        self._active = None
        self._scenario_pack_id = None

    def set_scenario_id(self, scenario_id=None):
        self._scenario_id = scenario_id if scenario_id is not None else str(uuid.uuid4())
        return self

    def set_name(self, name):
        self._name = name
        return self

    def set_type(self, type):
        self._type = type
        return self

    def set_active(self, active):
        self._active = active
        return self

    def set_scenario_pack_id(self, scenario_pack_id):
        self._scenario_pack_id = scenario_pack_id
        return self

    def build(self):
        return Scenario(
            scenario_id=self._scenario_id,
            name=self._name,
            type=self._type,
            active=self._active,
            scenario_pack_id=self._scenario_pack_id
        )

class TestcaseBuilder:
    def __init__(self):
        self._testcase_id = None
        self._name = None
        self._active = None
        self._version = None
        self._type = None
        self._scenario_id = None
        self._product_type = None
        self._event_type = None

    def set_testcase_id(self, testcase_id=None):
        self._testcase_id = testcase_id if testcase_id is not None else str(uuid.uuid4())
        return self

    def set_name(self, name):
        self._name = name
        return self

    def set_active(self, active):
        self._active = active
        return self

    def set_version(self, version):
        self._version = version
        return self

    def set_type(self, type):
        self._type = type
        return self

    def set_scenario_id(self, scenario_id):
        self._scenario_id = scenario_id
        return self

    def set_product_type(self, product_type):
        self._product_type = product_type
        return self

    def set_event_type(self, event_type):
        self._event_type = event_type
        return self

    def build(self):
        return Testcase(
            testcase_id=self._testcase_id,
            name=self._name,
            active=self._active,
            version=self._version,
            type=self._type,
            scenario_id=self._scenario_id,
            product_type=self._product_type,
            event_type=self._event_type
        )

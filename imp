import pandas as pd

# Load the expected.csv and actual.csv files, treating all columns as strings
expected_df = pd.read_csv("expected.csv", dtype=str)
actual_df = pd.read_csv("actual.csv", dtype=str)

# Get the key header column names from the user
key_columns = input("Enter the key column names separated by a comma: ").split(',')

# Create a key for each row in the expected and actual DataFrames
def create_key(row):
    return '-'.join(str(x) if x is not None else "" for x in row)

# Use both "Product" and "Price" as key columns
key_columns = ["Product", "Price"]

expected_df['key'] = expected_df[key_columns].apply(create_key, axis=1)
actual_df['key'] = actual_df[key_columns].apply(create_key, axis=1)

# Find keys and further columns present in expected.csv but not in actual.csv
expected_columns = expected_df.columns.difference(actual_df.columns)

# Find keys and further columns present in actual.csv but not in expected.csv
actual_columns = actual_df.columns.difference(expected_df.columns)

# Get common keys in actual.csv and expected.csv
common_keys = set(expected_df['key']).intersection(actual_df['key'])

# Sort the data using the keys
expected_df = expected_df.sort_values(by='key')
actual_df = actual_df.sort_values(by='key')

# Prepare the result of the comparison
comparison_result = []

for key in common_keys:
    expected_row = expected_df[expected_df['key'] == key]
    actual_row = actual_df[actual_df['key'] == key]

    comparison_dict = {'key': key}
    
    for column in expected_columns:
        comparison_dict[f'expected_{column}'] = expected_row.iloc[0][column]
        comparison_dict[f'actual_{column}'] = actual_row.iloc[0][column]
        comparison_dict[f'result_{column}'] = "Match" if expected_row.iloc[0][column] == actual_row.iloc[0][column] else "Mismatch"
    
    for column in actual_columns:
        comparison_dict[f'actual_{column}'] = actual_row.iloc[0][column]
        comparison_dict[f'result_{column}'] = "Match" if expected_row.iloc[0][column] == actual_row.iloc[0][column] else "Mismatch"
    
    comparison_result.append(comparison_dict)

# Create a DataFrame from the comparison_result list
comparison_df = pd.DataFrame(comparison_result)

# Save the comparison result to a CSV file
comparison_df.to_csv("comparison_result.csv", index=False)

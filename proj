project_root/
|-- config/
|   |-- stubbing_sheet_config.yaml
|   |-- reflow_db_config.yaml
|   |-- asset_class_mapping.yaml
|   |-- queue_mapping.yaml
|-- src/
|   |-- main.py
|   |-- stubbing_tool/
|       |-- __init__.py
|       |-- stubbing_service.py
|       |-- reflow_db_service.py
|       |-- queue_service.py
|       |-- email_service.py
|       |-- utils/
|           |-- __init__.py
|           |-- logging_utils.py
|-- tests/
|   |-- test_stubbing_service.py
|   |-- test_reflow_db_service.py
|   |-- test_queue_service.py
|   |-- test_email_service.py
|-- requirements.txt
|-- Dockerfile
|-- .gitignore
|-- alembic/
|   |-- versions/
|       |-- __init__.py
|-- .env.sample
|-- .travis.yml


Read Stubbing Sheet:

The tool starts by reading the stubbing sheet provided by the user. This sheet likely contains essential information for trade stubbing.
Unique TradeRef Retrieval:

The tool identifies unique trade references (TradeRef) from the stubbing sheet.
Connect to Reflow DB:

Establishes a connection to the Reflow Database to interact with stored trade references.
Check and Store in Reflow DB:

Checks if the identified trade references are already present in the Reflow Database.
If not, stores the trade references and associated information in the database.
Query and Retrieve Message from Reflow DB:

Executes a query to retrieve the message associated with a specific trade reference from the Reflow Database.
This message is typically in blob format (XML or JSON).
Update Cloned Message Based on Asset Class:

Determines the asset class from the stubbing sheet and identifies the relevant fields for generating a new trade based on a predefined map.
Creates a copy of the retrieved message (XML or JSON) and updates it using the specified fields for the corresponding asset class.
User-Defined Field Updates:

Incorporates user-defined updates from the stubbing sheet for the specific trade ID.
Flow Updated Message to Queues:

Directs the updated message to the appropriate queue based on the asset class. This decision is made using a map associating asset classes with queues.
Email Notification:

Sends an email notification, possibly indicating the successful flow of the message to the designated queue.

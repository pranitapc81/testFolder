from regression import run_regression
import nest_asyncio
import pandas as pd
import streamlit as st
import plotly.express as px
import numpy as np
nest_asyncio.apply()

PASS_ICON = "✔"
FAIL_ICON = "✘"
INPUT_CSV = "data/input/input.csv"
OUTPUT_DIR = "data/output/"

def calculate_average_coverage(df, metrics):
    """Calculate the average coverage for given metrics."""
    return {metric: f"{df[metric].mean():.2f}%" for metric in metrics}


def style_column(df, column, pass_icon, fail_icon):
    """Style a column with pass/fail icons."""
    df[column] = df[column].apply(lambda x: pass_icon if x else fail_icon)


def color_score(val):
    """Apply color styling for score values."""
    if pd.isna(val):
        return ''
    try:
        num = float(str(val).replace('%', '').strip()) if isinstance(val, str) else float(val)
        if num < 70:
            return 'background-color: #ff4b4b'
        elif num < 80:
            return 'background-color: #ffb60'
        elif num < 90:
            return 'background-color: #fff60'
        else:
            return 'background-color: #90ee90'
    except (ValueError, TypeError):
        return ''


def color_pass(val):
    """Apply color styling for pass/fail status."""
    if val == PASS_ICON:
        return (
            'color: white;'
            'background-color: #4CAF50;'  # Green background for pass
            'font-weight: bold;'
            'padding: 4px 8px;'
            'border-radius: 4px;'
            'text-align: center;'
        )
    else:
        return (
            'color: white;'
            'background-color: #f44336;'  # Red background for fail
            'font-weight: bold;'
            'padding: 4px 8px;'
            'border-radius: 4px;'
            'text-align: center;'
        )


def display_summary_table(df, metrics):
    """Display a summary table for average metrics."""
    summary_data = pd.DataFrame({
        "Metric": metrics,
        "Value": [f"{df[metric].mean():.2f}%" for metric in metrics]
    })
    st.subheader("Summary Metrics")
    st.data_editor(summary_data, num_rows='dynamic', hide_index=True)


def highlight_low_scores(df, columns=None):
    """Highlight cells with values below 80%."""
    if columns is None:
        columns = df.select_dtypes(include=['number']).columns
    
    def _highlight(val):
        if pd.isna(val):
            return ''
        try:
            # Handle both numeric values and strings with %
            num = float(str(val).replace('%', '').strip()) if isinstance(val, str) else float(val)
            return 'background-color: #ffcccc' if num < 80 else 'background-color: #e6ffe6'
        except (ValueError, TypeError):
            return ''
    
    return df.style.applymap(_highlight, subset=columns)

def display_scenario_summary(df, score_column, status_column):
    """Display a summary visualization for all scenarios."""
    st.subheader("📊 Scenario Performance Overview")
    
    # Calculate metrics for each scenario
    scenario_metrics = []
    for scenario, group in df.groupby('Scenario'):
        scores = pd.to_numeric(group[score_column], errors='coerce')
        scenario_metrics.append({
            'Scenario': scenario,
            'Average Score': scores.mean(),
            'Pass Rate': (group[status_column] == PASS_ICON).mean() * 100,
            'Count': len(group)
        })
    
    if not scenario_metrics:
        st.warning("No scenario data available for visualization")
        return
    
    metrics_df = pd.DataFrame(scenario_metrics)
    
    # Create tabs for different visualizations
    tab1, tab2, tab3 = st.tabs(["📈 Scores Overview", "📊 Pass Rate", "📋 Detailed Metrics"])
    
    with tab1:
        # Create a bar chart for average scores by scenario
        fig1 = px.bar(
            metrics_df.sort_values('Average Score', ascending=False),
            x='Scenario',
            y='Average Score',
            title='Average Score by Scenario',
            text_auto='.1f',
            color='Average Score',
            color_continuous_scale='RdYlGn',
            range_color=[0, 100]
        )
        fig1.update_traces(texttemplate='%{y:.1f}%', textposition='outside')
        fig1.update_layout(
            yaxis_title='Average Score (%)',
            xaxis_title='',
            coloraxis_showscale=False,
            yaxis_range=[0, 100]
        )
        st.plotly_chart(fig1, use_container_width=True)
    
    with tab2:
        # Create a bar chart for pass rates by scenario
        fig2 = px.bar(
            metrics_df.sort_values('Pass Rate', ascending=False),
            x='Scenario',
            y='Pass Rate',
            title='Pass Rate by Scenario',
            text_auto='.1f',
            color='Pass Rate',
            color_continuous_scale='RdYlGn',
            range_color=[0, 100]
        )
        fig2.update_traces(texttemplate='%{y:.1f}%', textposition='outside')
        fig2.update_layout(
            yaxis_title='Pass Rate (%)',
            xaxis_title='',
            coloraxis_showscale=False,
            yaxis_range=[0, 105]
        )
        st.plotly_chart(fig2, use_container_width=True)
    
    with tab3:
        # Display detailed metrics in a table
        metrics_df['Scenario'] = metrics_df['Scenario'].astype(str)
        st.dataframe(
            metrics_df.rename(columns={
                'Average Score': 'Avg Score (%)',
                'Pass Rate': 'Pass Rate (%)',
                'Count': 'Test Cases'
            }).style.format({
                'Avg Score (%)': '{:.1f}%',
                'Pass Rate (%)': '{:.1f}%'
            }),
            use_container_width=True,
            hide_index=True
        )

def display_collapsible_tables(df, group_column, score_column, status_column):
    """Display collapsible tables grouped by a specific column with enhanced styling."""
    # First show the scenario summary
    if 'Scenario' in df.columns:
        display_scenario_summary(df, score_column, status_column)
        st.markdown("---")  # Add a separator
    # Make a copy of the dataframe to avoid modifying the original
    df_display = df.copy()
    
    # Define columns to apply styling
    style_columns = [
        'Direct Answer Performance Score', 
        'Jira Coverage', 
        'Interpretation Jira Coverage',
        'Implementation Jira Coverage',
        'PR Coverage'
    ]
    
    # Filter out columns that don't exist in the DataFrame
    style_columns = [col for col in style_columns if col in df_display.columns]
    
    # Create a styled DataFrame with proper HTML formatting for the status column
    def format_status(x):
        if x == PASS_ICON:
            return '✅'  # Using emoji for better compatibility
        else:
            return '❌'  # Using emoji for better compatibility
    
    # Apply status column styling
    if status_column in df_display.columns:
        df_display[status_column] = df_display[status_column].apply(format_status)
    
    # Group and display the data
    grouped = df_display.groupby(group_column)
    for group_name, group in grouped:
        with st.expander(f"{group_column}: {group_name} ({score_column}: {df[df[group_column] == group_name][score_column].mean():.2f})", expanded=False):
            # Create a container with fixed height and scroll
            container = st.container()
            
            # Apply numeric styling to the group
            styled_group = highlight_low_scores(group.reset_index(drop=True), columns=style_columns)
            
            # Display the styled DataFrame with scroll
            with container:
                # Create tabs for table and visualization
                tab1, tab2 = st.tabs(["📊 Data Table", "📈 Score Distribution"])
                
                with tab1:
                    st.dataframe(
                        styled_group,
                        use_container_width=True,
                        height=min(400, (len(group) + 1) * 35 + 3),
                        column_config={
                            status_column: st.column_config.TextColumn(
                                status_column,
                                help="Status of the evaluation"
                            ),
                            **{
                                col: st.column_config.ProgressColumn(
                                    col,
                                    min_value=0,
                                    max_value=100,
                                    format="%.2f%%"
                                ) for col in style_columns if col in group.columns
                            }
                        }
                    )
                
                with tab2:
                    # Create tabs for different visualizations
                    viz_tab1, viz_tab2, viz_tab3 = st.tabs(["📊 Score Distribution", "📈 Scenario Comparison", "📋 Performance Overview"])
                    
                    with viz_tab1:
                        # Histogram of performance scores
                        if score_column in group.columns:
                            try:
                                # Ensure the score column is numeric
                                scores = pd.to_numeric(group[score_column], errors='coerce')
                                if scores.isna().all():
                                    raise ValueError("No valid numeric scores found")
                                
                                # Create histogram
                                fig1 = px.histogram(
                                    x=scores,
                                    nbins=10,
                                    title=f"Distribution of {score_column}",
                                    labels={"x": "Score", "count": "Number of Evaluations"},
                                    color_discrete_sequence=['#4CAF50']
                                )
                                
                                # Add vertical line at 80% threshold
                                fig1.add_vline(x=80, line_dash="dash", line_color="red", 
                                            annotation_text="80% Threshold", 
                                            annotation_position="top")
                                
                                # Customize layout
                                fig1.update_layout(
                                    xaxis_range=[0, 100],
                                    yaxis_title="Count",
                                    showlegend=False,
                                    plot_bgcolor='rgba(0,0,0,0)',
                                    paper_bgcolor='rgba(0,0,0,0)',
                                    margin=dict(l=20, r=20, t=40, b=20)
                                )
                                
                                st.plotly_chart(fig1, use_container_width=True)
                                
                            except Exception as e:
                                st.error(f"Error creating score distribution: {str(e)}")
                        else:
                            st.warning("Score column not available for visualization")
                    
                    with viz_tab2:
                        # Scenario comparison bar chart
                        if 'Scenario' in group.columns and score_column in group.columns:
                            try:
                                # Group by scenario and calculate average scores
                                scenario_scores = group.groupby('Scenario')[score_column].mean().reset_index()
                                scenario_scores = scenario_scores.sort_values(by=score_column, ascending=False)
                                
                                fig2 = px.bar(
                                    scenario_scores,
                                    x='Scenario',
                                    y=score_column,
                                    title=f"Average {score_column} by Scenario",
                                    color=score_column,
                                    color_continuous_scale='RdYlGn',
                                    range_color=[0, 100],
                                    text_auto='.1f'
                                )
                                
                                fig2.update_layout(
                                    xaxis_title="Scenario",
                                    yaxis_title=score_column,
                                    yaxis_range=[0, 100],
                                    coloraxis_showscale=False,
                                    plot_bgcolor='rgba(0,0,0,0)',
                                    paper_bgcolor='rgba(0,0,0,0)'
                                )
                                
                                fig2.update_traces(
                                    texttemplate='%{y:.1f}%',
                                    textposition='outside'
                                )
                                
                                st.plotly_chart(fig2, use_container_width=True)
                                
                            except Exception as e:
                                st.error(f"Error creating scenario comparison: {str(e)}")
                        else:
                            st.warning("Required columns not available for scenario comparison")
                    
                    with viz_tab3:
                        # Performance metrics overview
                        try:
                            # Create metrics cards
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                avg_score = pd.to_numeric(group[score_column], errors='coerce').mean()
                                st.metric("Average Score", f"{avg_score:.1f}%")
                            with col2:
                                median_score = pd.to_numeric(group[score_column], errors='coerce').median()
                                st.metric("Median Score", f"{median_score:.1f}%")
                            with col3:
                                pass_rate = (group[status_column] == PASS_ICON).mean() * 100
                                st.metric("Pass Rate", f"{pass_rate:.1f}%")
                            
                            # Add pass/fail pie chart
                            if status_column in group.columns:
                                status_counts = group[status_column].value_counts().reset_index()
                                status_counts.columns = ['Status', 'Count']
                                
                                fig3 = px.pie(
                                    status_counts,
                                    names='Status',
                                    values='Count',
                                    title="Pass/Fail Distribution",
                                    color='Status',
                                    color_discrete_map={
                                        '✅': '#4CAF50',
                                        '❌': '#f44336'
                                    }
                                )
                                
                                fig3.update_traces(
                                    textposition='inside',
                                    textinfo='percent+label',
                                    hole=.4
                                )
                                
                                st.plotly_chart(fig3, use_container_width=True)
                            
                        except Exception as e:
                            st.error(f"Error creating performance overview: {str(e)}")

# Main Evaluation Function

async def evaluate_direct_answer(client):
    """Run the evaluation process."""
    out_file, df = await run_regression(INPUT_CSV, OUTPUT_DIR, client, runs=4, result_type='direct_answer')
    st.text(f"Results saved to {out_file}")

    # Calculate and display build score
    build_score = (df["Jira Coverage"].mean() + df["Interpretation Jira Coverage"].mean()) / 2
    st.subheader(f"Evaluation Score: {build_score:.2f}")

    # Display summary metrics
    display_summary_table(df, metrics=["Jira Coverage", "Interpretation Jira Coverage"])

    # Display scenario summary and collapsible tables
    display_collapsible_tables(df, group_column="Scenario", score_column="Direct Answer Performance Score", status_column="Direct Answer Status")

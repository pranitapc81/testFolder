import pandas as pd

class ExcelHeaderUpdater:
    def __init__(self, mapping_file_path, mapping_sheet_name, target_file_path):
        self.mapping_file_path = mapping_file_path
        self.mapping_sheet_name = mapping_sheet_name
        self.target_file_path = target_file_path

    def load_mapping_sheet(self):
        mapping_excel = pd.ExcelFile(self.mapping_file_path)
        return mapping_excel.parse(self.mapping_sheet_name)

    def load_target_file(self):
        return pd.ExcelFile(self.target_file_path)

    def display_dataframe(self, df, title):
        print(f"\n{title} DataFrame:")
        print(df)

    def update_headers_for_sheet(self, sheet_name):
        # Load the target Excel file for the specific sheet
        target_df = pd.read_excel(self.target_file_path, sheet_name)

        # Display the original target dataframe for the sheet
        self.display_dataframe(target_df, f"Original Target - Sheet: {sheet_name}")

        # Load the mapping from the specific sheet
        mapping_df = self.load_mapping_sheet()

        # Create a dictionary to map old headers to new headers
        header_mapping = dict(zip(mapping_df['Current Header'], mapping_df['New Header']))

        # Rename columns in the target dataframe for the sheet
        target_df.rename(columns=header_mapping, inplace=True)

        # Display the updated target dataframe for the sheet
        self.display_dataframe(target_df, f"Updated Target - Sheet: {sheet_name}")

        # Save the updated dataframe back to the target Excel file for the sheet
        with pd.ExcelWriter(self.target_file_path, engine='openpyxl') as writer:
            writer.book = pd.load_workbook(self.target_file_path)
            target_df.to_excel(writer, sheet_name=sheet_name, index=False)
        print(f"\nUpdated Target Excel File - Sheet: {sheet_name} Saved.")

    def update_headers_for_event_sheets(self):
        # Load the target Excel file
        target_excel = self.load_target_file()

        # Get sheet names
        sheet_names = target_excel.sheet_names

        # Get sheet names ending with "EVENT"
        event_sheets = [sheet for sheet in sheet_names if sheet.upper().endswith('EVENT')]

        # Update headers for each sheet
        for sheet_name in event_sheets:
            self.update_headers_for_sheet(sheet_name)

# Example usage
if __name__ == "__main__":
    mapping_path = 'path/to/mapping.xlsx'
    mapping_sheet = 'MappingSheet'  # Replace with the actual sheet name in the mapping file
    target_path = 'path/to/target.xlsx'

    excel_updater = ExcelHeaderUpdater(mapping_path, mapping_sheet, target_path)
    excel_updater.update_headers_for_event_sheets()

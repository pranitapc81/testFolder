import pandas as pd
import json
from datetime import datetime

# Assuming df is your DataFrame read from the Excel file

# Helper function to generate a scenario ID
def get_scenario_id():
    # Generates a unique scenario ID based on the current datetime
    return 'sc_' + datetime.now().strftime('%Y%m%d%H%M%S%f')

# Function to extract trio field details for each row, generating unique scenario IDs
def extract_trio_details(row):
    scenario_id = get_scenario_id()  # Unique for each row
    details = []
    for col in row.index:
        if 'Actual_' in col:
            field_base = col.split('Actual_')[1]
            expected_col = f'Expected_{field_base}'
            result_col = f'Result_{field_base}'
            ignore_col = f'Ignore_{field_base}'

            # Determine the status of the field (Result or Ignore)
            if result_col in row.index and pd.notna(row[result_col]):
                field_status = row[result_col]
            elif ignore_col in row.index and pd.notna(row[ignore_col]):
                field_status = 'Ignore'
            else:
                field_status = None  # Adjust based on data or requirements
            
            details.append({
                'ScenarioID': scenario_id,
                'FieldName': field_base,
                'ActualValue': row[col],
                'ExpectedValue': row[expected_col] if expected_col in row.index else None,
                'FieldStatus': field_status
            })
    return details

# Process each row for the summary JSON output
def process_summary(row):
    scenario_id = get_scenario_id()  # Unique for each row
    pass_count = sum(row[col] == 'Pass' for col in row.index if 'Result_' in col)
    fail_count = sum(row[col] == 'Fail' for col in row.index if 'Result_' in col)
    ignore_count = sum(1 for col in row.index if 'Ignore_' in col and pd.notna(row[col]))

    return {
        'TestcaseID': row.name,
        'ScenarioID': scenario_id,
        'PassCount': pass_count,
        'FailCount': fail_count,
        'IgnoreCount': ignore_count
    }

# Applying the functions
df_details = df.apply(lambda row: extract_trio_details(row), axis=1)
summary_results = df.apply(lambda row: process_summary(row), axis=1)

# Convert results to JSON
json_details = json.dumps(list(df_details.sum()), indent=4)  # .sum() is used to flatten the list of lists
json_summary = json.dumps(list(summary_results), indent=4)

# Print or save the JSON outputs
print("Detailed JSON Output:")
print(json_details)
print("\nSummary JSON Output:")
print(json_summary)
